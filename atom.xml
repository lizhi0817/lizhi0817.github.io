<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>　</title>
  
  <subtitle>FreakBunny</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lizhi0817.github.io/"/>
  <updated>2019-10-10T17:20:10.914Z</updated>
  <id>https://lizhi0817.github.io/</id>
  
  <author>
    <name>Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数组反转</title>
    <link href="https://lizhi0817.github.io/2019/10/10/mei-ri-suan-fa-ti-zhi-shu-zu-fan-zhuan/"/>
    <id>https://lizhi0817.github.io/2019/10/10/mei-ri-suan-fa-ti-zhi-shu-zu-fan-zhuan/</id>
    <published>2019-10-10T08:02:02.000Z</published>
    <updated>2019-10-10T17:20:10.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现一"><a href="#实现一" class="headerlink" title="实现一"></a>实现一</h2><p>使用<code>Collections.reverse()</code>方法可以很简单实现，可读性比较高。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReverseString</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token string">"o"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关键的地方只有这么一句话    asList：可以将一个变长参数或者数组转换成List</span>        Collections<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="实现二"><a href="#实现二" class="headerlink" title="实现二"></a>实现二</h2><p>下面代码中，迭代数组的一半，改变对称位置的元素。<br>我们使用了临时变量，确保在迭代过程中不丢失当前位置的值。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invertUsingFor</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       String temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>       array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>       array<span class="token punctuation">[</span>array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>   <span class="token punctuation">}</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实现一&quot;&gt;&lt;a href=&quot;#实现一&quot; class=&quot;headerlink&quot; title=&quot;实现一&quot;&gt;&lt;/a&gt;实现一&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;Collections.reverse()&lt;/code&gt;方法可以很简单实现，可读性比较高。&lt;/p&gt;
&lt;pre cla
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://lizhi0817.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://lizhi0817.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Glide图片框架</title>
    <link href="https://lizhi0817.github.io/2019/09/20/glide-tu-pian-kuang-jia/"/>
    <id>https://lizhi0817.github.io/2019/09/20/glide-tu-pian-kuang-jia/</id>
    <published>2019-09-20T04:02:02.000Z</published>
    <updated>2019-10-10T17:25:09.769Z</updated>
    
    <content type="html"><![CDATA[<p>##Glide v4</p><h3 id="1-Glide使用"><a href="#1-Glide使用" class="headerlink" title="1.Glide使用"></a>1.Glide使用</h3><h4 id="1-1-Glide基本使用"><a href="#1-1-Glide基本使用" class="headerlink" title="1.1 Glide基本使用"></a>1.1 Glide基本使用</h4><p>大多数情况下，我们只要如下操作就可以了。<br><code>Glide.with(activity).load(url).into(imageView)</code></p><p>当然，不要忘了<strong>依赖</strong>和<strong>权限</strong>：</p><pre class=" language-grove"><code class="language-grove">implementation 'com.github.bumptech.glide:glide:4.9.0'annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'</code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.INTERNET<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h4 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a>Attention</h4><p>如果可能，请尽量在你的依赖中避免使用 @aar 。如果你必须这么做，请添加 transitive=true 以确保所有必要的类都被包含到你的 API 中：</p><pre class=" language-grove"><code class="language-grove">dependencies {    implementation ("com.github.bumptech.glide:glide:4.9.0@aar") {        transitive = true    }}</code></pre><p>在<code>Gradle</code>中，<code>@aar</code>意味着<code>Artifact Only</code>，默认情况下将排除所有依赖。<br>使用<code>@aar</code>而不使用<code>transitive=true</code>,将会排除<code>Glide</code>的依赖，并导致运行时异常，例如：</p><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>NoClassDefFoundError<span class="token operator">:</span> com<span class="token punctuation">.</span>bumptech<span class="token punctuation">.</span>glide<span class="token punctuation">.</span>load<span class="token punctuation">.</span>resource<span class="token punctuation">.</span>gif<span class="token punctuation">.</span>GifBitmapProvider    at com<span class="token punctuation">.</span>bumptech<span class="token punctuation">.</span>glide<span class="token punctuation">.</span>load<span class="token punctuation">.</span>resource<span class="token punctuation">.</span>gif<span class="token punctuation">.</span>ByteBufferGifDecoder<span class="token punctuation">.</span>&lt;init<span class="token operator">></span><span class="token punctuation">(</span>ByteBufferGifDecoder<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">68</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>bumptech<span class="token punctuation">.</span>glide<span class="token punctuation">.</span>load<span class="token punctuation">.</span>resource<span class="token punctuation">.</span>gif<span class="token punctuation">.</span>ByteBufferGifDecoder<span class="token punctuation">.</span>&lt;init<span class="token operator">></span><span class="token punctuation">(</span>ByteBufferGifDecoder<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">54</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>bumptech<span class="token punctuation">.</span>glide<span class="token punctuation">.</span>Glide<span class="token punctuation">.</span>&lt;init<span class="token operator">></span><span class="token punctuation">(</span>Glide<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">327</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>bumptech<span class="token punctuation">.</span>glide<span class="token punctuation">.</span>GlideBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>GlideBuilder<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">445</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>bumptech<span class="token punctuation">.</span>glide<span class="token punctuation">.</span>Glide<span class="token punctuation">.</span><span class="token function">initializeGlide</span><span class="token punctuation">(</span>Glide<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">257</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>bumptech<span class="token punctuation">.</span>glide<span class="token punctuation">.</span>Glide<span class="token punctuation">.</span><span class="token function">initializeGlide</span><span class="token punctuation">(</span>Glide<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">212</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>bumptech<span class="token punctuation">.</span>glide<span class="token punctuation">.</span>Glide<span class="token punctuation">.</span><span class="token function">checkAndInitializeGlide</span><span class="token punctuation">(</span>Glide<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">176</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>bumptech<span class="token punctuation">.</span>glide<span class="token punctuation">.</span>Glide<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Glide<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">160</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>bumptech<span class="token punctuation">.</span>glide<span class="token punctuation">.</span>Glide<span class="token punctuation">.</span><span class="token function">getRetriever</span><span class="token punctuation">(</span>Glide<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">612</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>bumptech<span class="token punctuation">.</span>glide<span class="token punctuation">.</span>Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Glide<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">684</span><span class="token punctuation">)</span>…………</code></pre><h4 id="1-2-Glide详细使用"><a href="#1-2-Glide详细使用" class="headerlink" title="1.2 Glide详细使用"></a>1.2 Glide详细使用</h4><p>如果我们需要多种业务场景去定制，Glide也是有一些扩展的。</p><h4 id="占位符-Placeholder"><a href="#占位符-Placeholder" class="headerlink" title="占位符(Placeholder)"></a>占位符(Placeholder)</h4><p>占位符是当请求正在执行时被展示的<code>Drawable</code>。当请求成功完成时，占位符会被请求到的资源替换。如果被请求的资源是从内存中加载出来的，那么占位符可能根本不会被显示。如果请求失败并且没有设置<code>error</code> <code>Drawable</code>，则占位符将被持续展示。类似地，如果请求的 <code>url</code> / <code>model</code> 为<code>null</code>，并且<code>error</code> <code>Drawable</code>和<code>fallback</code>都没有设置，那么占位符也会继续显示。</p><pre class=" language-java"><code class="language-java">  Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">placeholder</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>placeholder<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Or:</p><pre class=" language-java"><code class="language-java">  Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">placeholder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorDrawable</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><h4 id="错误符-Error"><a href="#错误符-Error" class="headerlink" title="错误符(Error)"></a>错误符(Error)</h4><p><code>error</code> <code>Drawable</code> 在请求永久性失败时展示。<code>error</code> <code>Drawable</code> 同样也在请求的 <code>url</code> / <code>model</code> 为<code>null</code> ，且并没有设置 <code>fallback</code> <code>Drawable</code> 时展示。</p><pre class=" language-java"><code class="language-java">  Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>error<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Or:</p><pre class=" language-java"><code class="language-java">Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorDrawable</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="后备回调符-Fallback"><a href="#后备回调符-Fallback" class="headerlink" title="后备回调符(Fallback)"></a>后备回调符(Fallback)</h4><p><code>fallback</code> <code>Drawable</code> 在请求的 <code>url</code> / <code>model</code> 为<code>null</code>时展示。设计<code>fallback</code> <code>Drawable</code> 的主要目的是允许用户指示<code>null</code>是否为可接受的正常情况。例如，一个<code>null</code>的个人资料<code>url</code>可能暗示这个用户没有设置头像，因此应该使用默认头像。然而，<code>null</code>也可能表明这个元数据根本就是不合法的，或者取不到。 默认情况下Glide将<code>null</code>作为错误处理，所以可以接受 null 的应用应当显式地设置一个<code>fallback</code> <code>Drawable</code>。</p><pre class=" language-java"><code class="language-java">  Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">fallback</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>fallback<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Or:</p><pre class=" language-java"><code class="language-java">Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>activity<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">fallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ColorDrawable</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>GREY<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h4><p>在一些情况下，我们可能在一组图片中需要调用相同的<code>错误符</code>或者其他的，如果我们再沿用上面的写法，虽然没有什么问题，但是，我们作为一个优秀的程序员，就要让代码变得优雅易读。于是乎，我们可以初始化一个新的<code>RequestOptions</code>，并在每次加载时通过<code>apply()</code>方法传入这个对象所以我们可以用以下写法：</p><pre class=" language-java"><code class="language-java">RequestOptions cropOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">centerCrop</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>cropOptions<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>imageView<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>apply()</code>方法可以被调用多次，因此<code>RequestOption</code>可以被组合使用。如果<code>RequestOptions</code>对象之间存在相互冲突的设置，那么只有最后一个被应用的<code>RequestOptions</code>会生效。<br>这时候有些小伙伴就想了，那我能不能像<code>Fresco</code>一样，给我的<code>view</code>添加渐入等动画。答案是当然可以了，毕竟<code>Glide</code>也越来越健壮了，支持的属性也多了，我们继续往下看。</p><h4 id="过渡选项"><a href="#过渡选项" class="headerlink" title="过渡选项"></a>过渡选项</h4><p><code>TransitionOptions</code>用于决定你的加载完成时会发生什么。<br>功能：</p><ul><li>View淡入</li><li>与占位符交叉淡入</li><li>或者什么都不发生</li></ul><p>如果不使用变换，你的图像将会<code>跳入</code>其显示位置，直接替换掉之前的图像。为了避免这种突然的改变，你可以淡入view，或者让多个Drawable交叉淡入，而这些都需要使用<code>TransitionOptions</code>完成。<br>例如，要应用一个交叉淡入变换：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> com<span class="token punctuation">.</span>bumptech<span class="token punctuation">.</span>glide<span class="token punctuation">.</span>load<span class="token punctuation">.</span>resource<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>DrawableTransitionOptions<span class="token punctuation">.</span>withCrossFade<span class="token punctuation">;</span>Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">transition</span><span class="token punctuation">(</span><span class="token function">withCrossFade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不同于<code>RequestOptions</code>，<code>TransitionOptions</code>是特定资源类型独有的，你能使用的变换取决于你让Glide加载哪种类型的资源。<br>这样的结果是，假如你请求加载一个<code>Bitmap</code>，你需要使用<code>BitmapTransitionOptions</code>，而不是<code>DrawableTransitionOptions</code>。同样，当你请求加载<code>Bitmap</code>时，你只需要做简单的淡入，而不需要做复杂的交叉淡入。</p><h4 id="集成库"><a href="#集成库" class="headerlink" title="集成库"></a>集成库</h4><h4 id="RecyclerView"><a href="#RecyclerView" class="headerlink" title="RecyclerView"></a>RecyclerView</h4><p><strong>关于</strong><br><code>RecyclerView</code>集成库使你在你的应用中能够使用<code>RecyclerViewPreloader</code>，它可以在用户滑动<code>RecyclerView</code>时自动加载稍微超前一些的图片。<br><strong>Gradle 依赖</strong></p><pre class=" language-grove"><code class="language-grove">compile ("com.github.bumptech.glide:recyclerview-integration:4.9.0") {  // 当然你还需要确保你的应用中有 RecyclerView 的依赖并正在你的应用中使用 RecyclerView  transitive = false}</code></pre><p><a href="https://muyangmin.github.io/glide-docs-cn/int/recyclerview.html" target="_blank" rel="noopener">具体细节</a></p><h4 id="OkHttp3"><a href="#OkHttp3" class="headerlink" title="OkHttp3"></a>OkHttp3</h4><p><code>OkHttp</code>是一个底层网络库(相较于<code>Cronet</code>或<code>Volley</code>而言)，尽管它也包含了<code>SPDY</code>的支持。<code>OkHttp</code>与<code>Glide</code>一起使用可以提供可靠的性能，并且在加载图片时通常比<code>Volley</code>产生的垃圾要少。对于那些想要使用比<code>Android</code>提供的<code>HttpUrlConnection</code>更<code>nice</code>的<code>API</code>，或者想确保网络层代码不依赖于<code>app</code>安装的设备上<code>Android OS</code>版本的应用，<code>OkHttp</code>是一个合理的选择。如果你已经在<code>app</code>中某个地方使用了 OkHttp ，这也是选择继续为<code>Glide</code>使用<code>OkHttp</code>的一个很好的理由，就像选择其他网络库一样。<br><strong>使用</strong><br>首先请确保你已经按照 <a href="https://muyangmin.github.io/glide-docs-cn/doc/configuration.html#%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F" target="_blank" rel="noopener">设置</a> 完成了应用程序设置。</p><p>然后添加一个对 OkHttp 集成库的依赖:</p><pre class=" language-grove"><code class="language-grove">compile "com.github.bumptech.glide:okhttp3-integration:4.9.0"</code></pre><p>添加 OkHttp 集成库的 Gradle 依赖将使 Glide 自动开始使用 OkHttp 来加载所有来自 http 和 https URL 的图片。</p><h3 id="2-Glide缓存模型"><a href="#2-Glide缓存模型" class="headerlink" title="2.Glide缓存模型"></a>2.Glide缓存模型</h3><pre><code>默认情况下，Glide 会在开始一个新的图片请求之前检查以下多级的缓存：1. 活动资源 (Active Resources) 2. 内存缓存 (Memory Cache) 3. 资源类型（Resource Disk Cache）4. 原始数据 (Data Disk Cache)活动资源：如果当前对应的图片资源正在使用，则这个图片会被Glide放入活动缓存。内存缓存：如果图片最近被加载过，并且当前没有使用这个图片，则会被放入内存中资源类型:  被解码后的图片写入磁盘文件中，解码的过程可能修改了图片的参数(如:inSampleSize、inPreferredConfig)原始数据:  图片原始数据在磁盘中的缓存(从网络、文件中直接获得的原始数据)</code></pre><p>很多人可能都想问了，为什么我这里就要把Glide分层四层呢？不都是三层吗？<br>其实3和4这两点都是磁盘缓存，只不过这里我分开了。接下来我们就会一层一层剥离，去分析。<br><img src="https://ftp.bmp.ovh/imgs/2019/09/972a320d7b4f94be.png" alt="示意图"><br>如上图：<br>我们要加载这个红色图章，首先它会先在活动资源中寻找，在活动缓存中查找对于的图片；如果没有，则会在内存缓存中寻找；如果内存中没有，则会在资源类型中寻找；如果资源中没有，则会在原始数据中查找。</p><h4 id="2-1-Glide-活动资源"><a href="#2-1-Glide-活动资源" class="headerlink" title="2.1 Glide 活动资源"></a>2.1 Glide 活动资源</h4><p>当需要加载某张图片能够从内存缓存中获得的时候，在图片加载时主动将对应图片从内存缓存中移除，加入到活动资源中。这样也可以避免因为达到内存缓存最大值或者系统内存压力导致的内存缓存清理，从而释放掉活动资源中的图片。<br>活动资源是一个<code>引用计数</code>的图片资源的弱引用合集。</p><p>因为同一张图片可能在多个地方被同时使用，每一次使用都会将引用计数+1，而当引用计数等于0的时候，则表示这个图片也就是没有被使用了，这样则会将托从活动资源中移除，并加入内存缓存。下面则是代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 引用计数为0回调* 将其从正在使用集合移除 并加入内存缓存** @param key* @param resource*/</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResourceReleased</span><span class="token punctuation">(</span>Key key<span class="token punctuation">,</span> Resource resource<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"引用计数为0,移除活跃缓存，加入内存缓存:"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    activeResources<span class="token punctuation">.</span><span class="token function">deactivate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    Glide<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMemoryCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果这里大家看的还是不是很明白的话，我们可以看几张图：</p><h4 id="2-2-Glide-内存缓存"><a href="#2-2-Glide-内存缓存" class="headerlink" title="2.2 Glide 内存缓存"></a>2.2 Glide 内存缓存</h4><p>内存缓存默认使用LRU(最近最少使用算法/缓存淘汰算法)，当资源从活动资源移除的时候，会加入此缓存。使用图片的时候会主动从此缓存移除，加入活动资源。<br>LRU在Android中的<code>android.support.v4.util</code>这个包下提供了工具类，我们可以看一下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">LruCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxSize <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"maxSize &lt;= 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.75F</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h2 id="还未完成"><a href="#还未完成" class="headerlink" title="还未完成"></a>还未完成</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##Glide v4&lt;/p&gt;
&lt;h3 id=&quot;1-Glide使用&quot;&gt;&lt;a href=&quot;#1-Glide使用&quot; class=&quot;headerlink&quot; title=&quot;1.Glide使用&quot;&gt;&lt;/a&gt;1.Glide使用&lt;/h3&gt;&lt;h4 id=&quot;1-1-Glide基本使用&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Android" scheme="https://lizhi0817.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://lizhi0817.github.io/tags/Android/"/>
    
      <category term="图片框架" scheme="https://lizhi0817.github.io/tags/%E5%9B%BE%E7%89%87%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>UI绘制优化</title>
    <link href="https://lizhi0817.github.io/2019/08/20/android-hui-zhi-you-hua/"/>
    <id>https://lizhi0817.github.io/2019/08/20/android-hui-zhi-you-hua/</id>
    <published>2019-08-20T07:01:43.000Z</published>
    <updated>2019-10-10T16:34:31.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、CPU与GPU工作流程"><a href="#一、CPU与GPU工作流程" class="headerlink" title="一、CPU与GPU工作流程"></a>一、CPU与GPU工作流程</h2><p><code>矢量图</code>：计算机图形学中用点、直线或者多边形等基于数学方程的几何图元表示图像。简单说就是，无论它怎么放大缩小，它都不会出现变形的情况。<br><code>位图</code>：又称栅格图或点阵图，是使用像素阵列(Pixel-array/Dot-matrix点阵)来表示的图像。<br><code>CPU</code>：中央处理器，CPU计算图形的结果是矢量图。<br><code>GPU</code>：传统意义上说是显卡，主要是用于绘图的工作。GPU放到屏幕上的是位图信息。</p><p>　　我们可以这么理解，就是CPU在计算的时候，把计算的结果变成一个公式，然后把这个公式交给GPU，GPU就按照屏幕的分辨率，按照公式去套用，最后就把套出的信息展示到屏幕上，这个过程，我们就可以把它称为栅格化。<br>　　我们可以看下图，更好的理解：<br><img src="https://b2.bmp.ovh/imgs/2019/08/e7b1c098ea9f457c.png" alt="示意图"><br>　　像这样的一个三角形，位图信息就是把箭头右边的各种颜色的点组织起来，所以这个变成栅格化后，再交给显示器用来展示。大概的流程，如下图所示：<br><img src="https://b2.bmp.ovh/imgs/2019/08/8552338f302a9a41.png" alt="示意图"><br>　　这就是图像从CPU到GPU的一个完整的过程。</p><h3 id="1-CPU和GPU的工作流程"><a href="#1-CPU和GPU的工作流程" class="headerlink" title="1.CPU和GPU的工作流程"></a>1.CPU和GPU的工作流程</h3><p><img src="https://b2.bmp.ovh/imgs/2019/08/f0798db2636c3a33.jpg" alt="示意图"><br><code>Control&lt;黄色&gt;</code>：控制器，用于协调控制整个CPU的运行，包括取出指令、控制其他模块的运行等。<br><code>ALU&lt;绿色&gt;</code>：算术逻辑单元，用于进行数学、逻辑运算。<br><code>Cache、DRAM&lt;橙色&gt;</code>:分别为缓存和RAM，用于存储信息。</p><p>　　其实CPU就像一个大脑一样，去计算各种处理的方法。但是我们为什么要给GPU去算呢？因为在CPU身上，它本身的ALU运算单元不够多&lt;绿色的那个&gt;，要进行算数、逻辑运算很多的时候，CPU是负担不起的，而CPU是有很多的ALU单元的，所以CPU主要是把计算的方法提供给GPU，让GPU去计算。</p><p>　　在Android中，比方说我们在布局文件中写了一个按钮，它会通过LayoutInflater加载到内存，然后它会在内存中。在内存中，它就会变成一个Button对象，这个对象就会由CPU去计算这个Button会化成什么样子。比如它的宽高、左边距离屏幕的像素等等。之后，它就会把这些东西扔到GPU中，GPU再进行绘制。</p><h3 id="2-帧率"><a href="#2-帧率" class="headerlink" title="2.帧率"></a>2.帧率</h3><p>　　在我们绘制的时候，就会出现<code>帧</code>这个东西。就是我们在玩一些游戏的时候，就会出现<code>FPS(每秒传输帧数(Frames Per Second))</code>，当然，显卡越牛逼，帧率也就会越高，页面流畅、清晰度也就越好。现在这个阶段，显卡最好的是英伟达下的<code>Titan</code>，如果大家有兴趣的话，可以自己去看一下。<br>　　好了，我们回归正题，咱们在看画面的时候，会有一个刷新率的概念，也就是我们上面说的FPS。接下来我们说一下这个帧率不同，对用户影响的问题：</p><ul><li>12 fps ：由于人类眼睛的特殊生理结构，如果所看画面之帧率高于每秒约10-12帧的时候，就会认为是连贯的。</li><li>24 fps ：有声电影的拍摄及播放帧率均为每秒24帧，对一般人而言已算可接受。</li><li>30 fps ：早期的高动态电子游戏，帧率少于每秒30帧的话就会显得不连贯，这是因为没有动态模糊使流畅度降低。</li><li>60 fps 在与手机交互过程中，如触摸和反馈 60帧以下人是能感觉出来的。60帧以上不能察觉变化。</li></ul><p>　　所以说，当帧率高于60FPS的时候，用户是感觉不出画面卡顿和迟滞的现象的。<br>　　<code>Android</code>系统每隔<code>16ms</code>发出VSYNC&lt;垂直同步&gt;信号(1000ms/60=16.66ms)&lt;每秒发60帧，在这些帧中，每次都是做同样的事情&gt; ，触发对UI进行渲染， 如果每次渲染都成功这样就能够达到流畅的画面所需要的60fps ，为了能够实现60fps，这意味着计算渲染的大多数操作都必须在16ms内完成。<br>　　大家在玩一些游戏的时候，或者说VR等设备的时候，要求的帧率比较高，当帧率/刷新率不够的时候，就会晕。所以说，建议买90帧以上的设备去玩。<br>　　大家可以看下面这张图：<br><img src="https://b2.bmp.ovh/imgs/2019/08/07e36a2a83e47e5b.png" alt="示意图"><br>　　在图中。我们可以清楚的看到，有些地方是丢帧的，比如<code>2、3、4</code>，这几个在绘制的时候，垂直同步机制会让显示器硬件等待GPU完成栅格化渲染操作，这样会让一帧画面多停留了16ms，甚至更多，这样就会造成画面卡顿。所以说，只有<code>1</code>能显示出来，而往后的无论是CPU还是GPU，它们在计算的时候，任何一个没有计算完成，它就不会显示，只有两者都在同一16ms的时间里面，才能显示出来。用户才能看到正常的画面，反之，则会导致图像卡顿，当然卡顿不包括丢帧，还有内存抖动、内存碎片这些都会引起UI的抽筋。<br>　　所以我们在实际开发中，要将UI对象转化成一系列多边形和纹理的过程，转换成纹理就是将矢量图变成位图的过程。如下图：<br><img src="https://b2.bmp.ovh/imgs/2019/08/850398a004a5e58d.png" alt="示意图"><br>　　我们要处理的话，主要是通过两种方式：</p><ol><li>将UI对象转化为一系列的多边形和纹理</li><li>CPU传递处理数据到GPU。<br>　　如何减少这两部分的时间，以至于让其在16ms中完成：</li></ol><ul><li>CPU 减少xml转换对象的时间</li><li>GPU 减少重复绘制的时间</li></ul><h2 id="二、过度绘制优化"><a href="#二、过度绘制优化" class="headerlink" title="二、过度绘制优化"></a>二、过度绘制优化</h2><p>　　目的：<code>减少GPU工作量</code><br>　　GPU的绘制过程，就跟刷墙一样一层层的进行，16ms刷一次．这样就会造成，图层覆盖的现象，即无用的图层还被绘制在底层，造成不必要的浪费．<br>GPU过度绘制几种情况：</p><ol><li>自定义控件中onDraw方法做了过多重复绘制</li><li>布局层次太深，重叠性太强。用户看不到的区域GPU也会渲染，导致耗时增加。<br>我们可以看下面这个图：<br><img src="https://b2.bmp.ovh/imgs/2019/08/ab756d3ef7afce27.png" alt="示意图"><br>其中红色框部分的是可以不用显示的，因为这是遮盖的部分，当我们需要它显示的时候，再让它绘制就可以了，如果一次性把这些UI都绘制出来，则会加大GPU的负担。所以说，我们在绘制的时候，只需要将要非覆盖的地方展示出来就可以了。</li></ol><h3 id="1-查看方法"><a href="#1-查看方法" class="headerlink" title="1.查看方法"></a>1.查看方法</h3><blockquote><p>开发者选项-&gt;Profile GPU rendering/调试GPU过度绘制<br>如果没有开发者选项的话，请疯狂点击版本号，然后就会显示版本号了。</p></blockquote><p><img src="https://b2.bmp.ovh/imgs/2019/08/732e47c71d820d24.png" alt="示意图"><br>下图则是每次每个图层叠加的时候，相应的显示的状态，当叠加到4层及以上，过度绘制的颜色都是这个深红色。</p><ul><li>蓝色 过度绘制一次无过度绘制</li><li>淡绿 过度绘制两次</li><li>淡红 过度绘制三次</li><li>深红 过度绘制四次<br>我们的目标就是尽量减少红色 Overdraw , 看到更多的蓝色区域。<br><img src="https://b2.bmp.ovh/imgs/2019/08/75d647d00e429053.png" alt="示意图"></li></ul><h3 id="2-处理方案"><a href="#2-处理方案" class="headerlink" title="2.处理方案"></a>2.处理方案</h3><h4 id="1-减少背景重复"><a href="#1-减少背景重复" class="headerlink" title="1.减少背景重复"></a>1.减少背景重复</h4><p>注意主题中的设置</p><ol><li>去掉单个activity的主题设置的属性可以在<code>setContentView()</code>之前<code>getWindow().setBackgroundDrawable(null);</code></li><li>去掉所有activity主题设置中的属性直接在<code>styles.xml</code>中设置<code>&lt;item name=&quot;android:windowBackground&quot;&gt;@null&lt;/item&gt;</code><br>建议使用第二种</li></ol><p>非业务需要，不要去设置背景。在设置加载默认图片的时候，可以设置背景透明。因为透明不会影响任何性能。</p><h4 id="2-使用裁减减少控件之间的重合部分"><a href="#2-使用裁减减少控件之间的重合部分" class="headerlink" title="2.使用裁减减少控件之间的重合部分"></a>2.使用裁减减少控件之间的重合部分</h4><p>当我们在绘制一些图形的时候，会出现图形叠加在一起，如果我们把叠加的位置都不画出来，只绘制能显示的地方，那么GPU的劳动则会减少很多。<br>我们可以看两段代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DroidCard</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> width<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token keyword">public</span> Bitmap bitmap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DroidCard</span><span class="token punctuation">(</span>Resources res<span class="token punctuation">,</span> <span class="token keyword">int</span> resId<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bitmap <span class="token operator">=</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> resId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bitmap<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bitmap<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DroidCardsView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//图片与图片之间的间距</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mCardSpacing <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//图片与左侧距离的记录</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mCardLeft <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>DroidCard<span class="token operator">></span> mDroidCards <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>DroidCard<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Paint paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DroidCardsView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">DroidCardsView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initCards</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化卡片集合     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initCards</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Resources res <span class="token operator">=</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mDroidCards<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DroidCard</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>alex<span class="token punctuation">,</span> mCardLeft<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mCardLeft <span class="token operator">+=</span> mCardSpacing<span class="token punctuation">;</span>        mDroidCards<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DroidCard</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>claire<span class="token punctuation">,</span> mCardLeft<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mCardLeft <span class="token operator">+=</span> mCardSpacing<span class="token punctuation">;</span>        mDroidCards<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DroidCard</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>kathryn<span class="token punctuation">,</span> mCardLeft<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>DroidCard c <span class="token operator">:</span> mDroidCards<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">drawDroidCard</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">drawDroidCard</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">,</span> DroidCard c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        canvas<span class="token punctuation">.</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>bitmap<span class="token punctuation">,</span> c<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://ftp.bmp.ovh/imgs/2019/08/2ee23512cbcc8515.jpg" alt="绘制效果"></p><hr><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DroidCardsView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//图片与图片之间的间距</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mCardSpacing <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//图片与左侧距离的记录</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mCardLeft <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>DroidCard<span class="token operator">></span> mDroidCards <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>DroidCard<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Paint paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DroidCardsView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">DroidCardsView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initCards</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化卡片集合     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initCards</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Resources res <span class="token operator">=</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mDroidCards<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DroidCard</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>alex<span class="token punctuation">,</span> mCardLeft<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mCardLeft <span class="token operator">+=</span> mCardSpacing<span class="token punctuation">;</span>        mDroidCards<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DroidCard</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>claire<span class="token punctuation">,</span> mCardLeft<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mCardLeft <span class="token operator">+=</span> mCardSpacing<span class="token punctuation">;</span>        mDroidCards<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DroidCard</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>kathryn<span class="token punctuation">,</span> mCardLeft<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mDroidCards<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">drawDroidCard</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> mDroidCards<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">drawLastDroidCard</span><span class="token punctuation">(</span>canvas<span class="token punctuation">,</span> mDroidCards<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mDroidCards<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">drawLastDroidCard</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">,</span> DroidCard c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        canvas<span class="token punctuation">.</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>bitmap<span class="token punctuation">,</span> c<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 只画出裁剪出来的一部分图片     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">drawDroidCard</span><span class="token punctuation">(</span>Canvas canvas<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>DroidCard<span class="token operator">></span> mDroidCards<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DroidCard c <span class="token operator">=</span> mDroidCards<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保存</span>        canvas<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">clipRect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> c<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>mDroidCards<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> c<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>        canvas<span class="token punctuation">.</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>bitmap<span class="token punctuation">,</span> c<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//还原</span>        canvas<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>第二段代码，就会我们绘制后的情形，当我们打开GPU绘制的时候，一切就都看到了，如下图：<br><img src="https://ftp.bmp.ovh/imgs/2019/08/cc42df2edc1d5c20.png" alt="绘制效果"><br>怎么样？是不是很惊奇</p><h4 id="3-Android7-0之后系统做出的优化"><a href="#3-Android7-0之后系统做出的优化" class="headerlink" title="3.Android7.0之后系统做出的优化"></a>3.Android7.0之后系统做出的优化</h4><p>invalidate()不再执行测量和布局动作。</p><h2 id="三、布局的优化"><a href="#三、布局的优化" class="headerlink" title="三、布局的优化"></a>三、布局的优化</h2><p>　　目的：<code>减少CPU工作量</code></p><h3 id="1-常用工具"><a href="#1-常用工具" class="headerlink" title="1.常用工具"></a>1.常用工具</h3><p>路径：Android/sdk/tools/bin/ui    automator   viewer.bat<br>路径：AndroidSDK\tools    monitor.bat<br><img src="https://ftp.bmp.ovh/imgs/2019/08/ca7c327f7420365d.png" alt="示意图"><br>从图中，我们可以看出基本是没有能优化的地方了，但是我们可以强行优化，就是通过<code>merge</code>合并了父布局，这样就再减少一层布局嵌套，如下：<br><img src="https://ftp.bmp.ovh/imgs/2019/08/beda270ac95df15f.png" alt="示意图"></p><p>下面则是我们写的代码，分别是优化前，优化后。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--优化前--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.lee.bilibili.cardview.DroidCardsView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>merge</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--优化后--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.lee.bilibili.cardview.DroidCardsView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>merge</span><span class="token punctuation">></span></span></code></pre><p>我们只通过merge标签就可以合并这一层，让父布局消失。</p><h2 id="四、结论"><a href="#四、结论" class="headerlink" title="四、结论"></a>四、结论</h2><ol><li>能在一个平面显示的内容，尽量只用一个容器</li><li>尽可能把相同的容器合并merge</li><li>能复用的代码，用include处理，可以减少GPU重复工作</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、CPU与GPU工作流程&quot;&gt;&lt;a href=&quot;#一、CPU与GPU工作流程&quot; class=&quot;headerlink&quot; title=&quot;一、CPU与GPU工作流程&quot;&gt;&lt;/a&gt;一、CPU与GPU工作流程&lt;/h2&gt;&lt;p&gt;&lt;code&gt;矢量图&lt;/code&gt;：计算机图形学中用点
      
    
    </summary>
    
      <category term="Android" scheme="https://lizhi0817.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://lizhi0817.github.io/tags/Android/"/>
    
      <category term="性能优化" scheme="https://lizhi0817.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>APP启动优化</title>
    <link href="https://lizhi0817.github.io/2019/07/18/android-qi-dong-you-hua/"/>
    <id>https://lizhi0817.github.io/2019/07/18/android-qi-dong-you-hua/</id>
    <published>2019-07-18T01:25:00.000Z</published>
    <updated>2019-07-31T06:46:30.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、App启动分类"><a href="#一、App启动分类" class="headerlink" title="一、App启动分类"></a>一、App启动分类</h2><h3 id="1-冷启动-COLD-START"><a href="#1-冷启动-COLD-START" class="headerlink" title="1.冷启动 COLD START"></a>1.冷启动 COLD START</h3><p>当启动应用时，后台没有该应用的进程（常见如：首次启动等），这时系统会重新创建一个新的进程分配给该应用那么这种方式下，应用启动的时间最长的。</p><h3 id="2-热启动-WARM-START"><a href="#2-热启动-WARM-START" class="headerlink" title="2.热启动 WARM START"></a>2.热启动 WARM START</h3><p>相比温启动，热启动时应用做的工作更少，启动时间更短。热启动产生的场景很多，常见如：用户使用返回键退出应用，然后马上又重新启动应用</p><h3 id="3-温启动-LUKEWARM-START"><a href="#3-温启动-LUKEWARM-START" class="headerlink" title="3.温启动 LUKEWARM START"></a>3.温启动 LUKEWARM START</h3><p>App进程存在，当时Activity可能因为内存不足被回收。这时候启动App不需要重新创建进程，但是Activity的onCrate()方法得重新执行的。<br>举个例子：<br>打开游戏一直在玩，微信弹出一个聊天消息，切换到微信，聊了一会儿天后，过了一段时间之后再次回到游戏。这时候游戏的进程虽然存在，但是Activity很有可能已经被回收了，这时候外面就只需要重新加载Activity就可以了。</p><hr><p><strong>热启动</strong>和<strong>温启动</strong>因为会从已有的进程中来启动，不会再创建和初始化Application。</p><p>平时我们讨论中基本都会将<strong>温启动</strong>和<strong>热启动</strong>合在一起统称为<strong>热启动</strong>，因为<strong>温启动</strong>与<strong>热启动</strong>差异很小，如果不是特别留意启动流程，那么在用户体验和感官上没有直接差异，但是在<code>Framework</code>层执行时是有一定差异的。本次优化点也是围绕冷启动和热启动来做，将温启动与热启动统称为热启动。</p><p>另外有一点，从绝对时间上来看，app安装后的<strong>首次启动</strong>将会最耗时，因为首次启动会新建数据库，<code>sp</code>文件，各种缓存，配置等。</p><h3 id="4-查看启动时间"><a href="#4-查看启动时间" class="headerlink" title="4.查看启动时间"></a>4.查看启动时间</h3><p>我们可以看一下这里给出的Demo加载的时间：<br><img src="https://b2.bmp.ovh/imgs/2019/07/fbb5001c735b59d9.png" alt="示意图"><br>其中，第一行就是<code>冷启动</code>，第二行则是<code>热启动</code>。<br>上面我们已经说了冷启动和热启动的概念了，这里就是看一下它们之间加载的差距。如果读者想看一下自己APP的启动时间，请往下看：</p><h4 id="4-4前"><a href="#4-4前" class="headerlink" title="4.4前"></a>4.4前</h4><p>在4.4之前，我们需要通过命令去查看 </p><blockquote><p>adb shell am start -W   packName/packName.ClassName</p></blockquote><p><code>ThisTime：</code>最后一个启动的Activity的启动耗时<br><code>TotalTime：</code>自己的所有Activity的启动耗时<br><code>WaitTime：</code> <code>ActivityManagerService</code>启动App的Activity时的总时间（包括当前Activity的onPause()和自己Activity的启动）<br>下图中，我们可以清晰的看到：<br><img src="https://b2.bmp.ovh/imgs/2019/07/23a30dc9f6b9be67.jpg" alt="示意图"><br>如果是<strong>冷启动</strong>，则会在<code>System</code>中，把APP的信息加载到内存，然后这个时候再去通过<code>ActivityThread(下面会说到)</code>调到<code>Application</code>，再往后则会做各种各样的事情。这就是冷启动。<br>如果是<strong>热启动</strong>，则App的信息就已经在内存中存在了，就不要调用那些一大堆的东西了，直接启动<code>Activity</code>了。</p><p>我们可以通过命令去查看后台进程：</p><blockquote><p>adb shell ps</p></blockquote><p><img src="https://b2.bmp.ovh/imgs/2019/07/dbc8f74145aec96a.jpg" alt="示意图"><br>这就是后台的部分进程。我们可以查看自己的进程，仔细观察，就会发现自己App的进程。</p><p>下图中，<code>ThisTime</code>和<code>TotalTime</code>为0的原因是手机太快了，因为它是以秒为单位，低于就看不到了。<br><img src="https://b2.bmp.ovh/imgs/2019/07/ddf2e3cb08fac389.jpg" alt="示意图"><br>这时候我们需要把当前的Activity退出，然后执行命令，就会看到下面的分析结果了。<br><img src="https://b2.bmp.ovh/imgs/2019/07/e162e912a5a9ee67.jpg" alt="示意图"></p><h4 id="4-4后"><a href="#4-4后" class="headerlink" title="4.4后"></a>4.4后</h4><p>在4.4之后就很简单了，我们只需要通过命令去查看<code>Logcat</code>输入<code>Display</code>筛选系统日志，不过滤信息即可<code>(No Filters)</code>。</p><h2 id="二、系统的启动"><a href="#二、系统的启动" class="headerlink" title="二、系统的启动"></a>二、系统的启动</h2><p>先给大家贴个图吧，大概了解一下。(有点儿丑，大概看一下就行)<br><img src="https://i.loli.net/2019/07/18/5d308139e40b597502.png" alt="示意图"></p><h3 id="1-系统初始化"><a href="#1-系统初始化" class="headerlink" title="1.系统初始化"></a>1.系统初始化</h3><p><code>源码为C++</code></p><ul><li><strong>BootLoader</strong>：负责拉起操作系统</li><li><strong>Linux Kernel</strong>：做系统的各种设置，目录加载，网络配置….这里面有个比较重要的点就是，它通过init.rc这个文件，初始化后会启动名为<strong>init</strong>的一个进程，其中它的ID号为1。</li><li><strong>init</strong>：开启一个孵化器(Zygote)&lt;别Google翻译,如果你不知道的话&gt;。</li><li><strong>Zygote</strong>：它会孵化出和自己一样的对象，靠着它可以孵化出和它一样的进程，非常强大。它还可以创建JVM虚拟机，还有注册JNI的方法等等…</li></ul><p>　　在创建完虚拟机后，它还会打开<code>SystemServer</code>，并在这里面会完成打开<code>Binder线程池</code>，同时会打开<code>SystemServiceManager</code>，前者主要是用于远端进程之间的通讯，通过<code>SystemServer</code>和<code>SystemServiceManager</code>的合作，会启动我们在程序中用到的各种服务，比如：<code>ActivityManagerService(程序中所有的Activity)</code>、<code>WindowManagerService(窗口有关)</code>、<code>PackageManagerService(安装包)</code>、<code>CameraService(相机)</code>、<code>SensorService(传感器)</code>…..这种服务有很多，各位看官感兴趣的话可以Google一下。<br>　　其中，<code>ActivityManagerService</code>会启动一个叫做<code>Lanucher</code>的东西。接下来，我们就聊一下它的启动过程。</p><h3 id="2-Lanucher"><a href="#2-Lanucher" class="headerlink" title="2.Lanucher"></a>2.Lanucher</h3><blockquote><p>adb shell dumpsys activity activities</p></blockquote><p>通过上面这一行代码，我们可以查看当前运行的所有Activity的名字。<br><img src="https://i.loli.net/2019/07/18/5d30813a0522635526.png" alt="示意图"><br>各位看官可以看一下，这是其中一段正在运行名为<code>InCallActivity</code>的Activity。我们可以把正在运行的手机桌面当做一个Activity，为什么这么说呢，因为桌面上的这些图标也是按钮，我们开发的APP的UI上也是按钮，所以我们可以把桌面上的APP当做按钮来理解。<br>我们可以看一下源码</p><pre class=" language-java"><code class="language-java">  <span class="token operator">*</span> <span class="token annotation punctuation">@param</span> v     <span class="token operator">*</span>            The view representing the clicked shortcut<span class="token punctuation">.</span>     <span class="token operator">*</span>            表示单击的快捷方式的视图。     <span class="token operator">*</span><span class="token operator">/</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Make sure that rogue clicks don't get through while allapps is</span>        <span class="token comment" spellcheck="true">// launching, or after the</span>        <span class="token comment" spellcheck="true">// view has detached (it's possible for this to happen if the view is</span>        <span class="token comment" spellcheck="true">// removed mid touch).</span>        <span class="token comment" spellcheck="true">// 确保所有APP启动时，或者视图分离后，恶意点击不会通过</span>        <span class="token comment" spellcheck="true">// (如果在触摸过程中移除视图，则可能发生这种情况)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">getWindowToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mWorkspace<span class="token punctuation">.</span><span class="token function">isFinishedSwitchingState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Object tag <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token keyword">instanceof</span> <span class="token class-name">ShortcutInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 打开快捷方式对应的intent</span>            <span class="token keyword">final</span> Intent intent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ShortcutInfo<span class="token punctuation">)</span> tag<span class="token punctuation">)</span><span class="token punctuation">.</span>intent<span class="token punctuation">;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            v<span class="token punctuation">.</span><span class="token function">getLocationOnScreen</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>            intent<span class="token punctuation">.</span><span class="token function">setSourceBounds</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rect</span><span class="token punctuation">(</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    <span class="token operator">+</span> v<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token function">startActivitySafely</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> intent<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">&amp;&amp;</span> v <span class="token keyword">instanceof</span> <span class="token class-name">BubbleTextView</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mWaitingForResume <span class="token operator">=</span> <span class="token punctuation">(</span>BubbleTextView<span class="token punctuation">)</span> v<span class="token punctuation">;</span>                mWaitingForResume<span class="token punctuation">.</span><span class="token function">setStayPressed</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token keyword">instanceof</span> <span class="token class-name">FolderInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token keyword">instanceof</span> <span class="token class-name">FolderIcon</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 打开文件夹</span>                FolderIcon fi <span class="token operator">=</span> <span class="token punctuation">(</span>FolderIcon<span class="token punctuation">)</span> v<span class="token punctuation">;</span>                <span class="token function">handleFolderClick</span><span class="token punctuation">(</span>fi<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> mAllAppsButton<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 显示或者不显示“全部程序”界面</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAllAppsVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">showWorkspace</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">onClickAllAppsButton</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">startActivitySafely</span><span class="token punctuation">(</span>View v<span class="token punctuation">,</span> Intent intent<span class="token punctuation">,</span> Object tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            success <span class="token operator">=</span> <span class="token function">startActivity</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> intent<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ActivityNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>activity_not_found<span class="token punctuation">,</span>                    Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Unable to launch. tag="</span> <span class="token operator">+</span> tag <span class="token operator">+</span> <span class="token string">" intent="</span> <span class="token operator">+</span> intent<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> success<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">boolean</span> <span class="token function">startActivity</span><span class="token punctuation">(</span>View v<span class="token punctuation">,</span> Intent intent<span class="token punctuation">,</span> Object tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        intent<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>FLAG_ACTIVITY_NEW_TASK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Only launch using the new animation if the shortcut has not opted</span>            <span class="token comment" spellcheck="true">// out (this is a</span>            <span class="token comment" spellcheck="true">// private contract between launcher and may be ignored in the</span>            <span class="token comment" spellcheck="true">// future).</span>            <span class="token comment" spellcheck="true">// 只有在快捷方式没有选择退出时才使用新动画启动</span>            <span class="token comment" spellcheck="true">// (这是启动程序之间私有的，以后可能会被忽略)</span>            <span class="token keyword">boolean</span> useLaunchAnimation <span class="token operator">=</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>intent<span class="token punctuation">.</span><span class="token function">hasExtra</span><span class="token punctuation">(</span>INTENT_EXTRA_IGNORE_LAUNCH_ANIMATION<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>useLaunchAnimation<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ActivityOptions opts <span class="token operator">=</span> ActivityOptions<span class="token punctuation">.</span><span class="token function">makeScaleUpAnimation</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>                        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> opts<span class="token punctuation">.</span><span class="token function">toBundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>string<span class="token punctuation">.</span>activity_not_found<span class="token punctuation">,</span>                    Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span>                    <span class="token string">"Launcher does not have the permission to launch "</span>                            <span class="token operator">+</span> intent                            <span class="token operator">+</span> <span class="token string">". Make sure to create a MAIN intent-filter for the corresponding activity "</span>                            <span class="token operator">+</span> <span class="token string">"or use the exported attribute for this activity. "</span>                            <span class="token operator">+</span> <span class="token string">"tag="</span> <span class="token operator">+</span> tag <span class="token operator">+</span> <span class="token string">" intent="</span> <span class="token operator">+</span> intent<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>当我们点击<code>onClick</code>这个方法的时候，就会把应用信息传到intent中，就是<code>((ShortcutInfo) tag).intent</code>这个<code>tag</code>。他就会把信息封装成一个intent，<code>startActivitySafely</code>这里就是启动是否成功，当我们再往里面点进去看的时候，就是进入第二个代码块中，然后再点击第二个代码块中的<code>startActivity</code>，我们就会进去到第三个代码块中。这个代码块和我们传统的开启Activity是不一样的，我们画个图继续分析下去。<br><img src="https://i.loli.net/2019/07/18/5d308139e42f846976.png" alt="示意图"><br>这里红线表示的是它是通过<code>AMS(ActivityManagerService)</code>管理的。后面我们聊架构的时候，也会说这个东西，暂时先不说，因为这个比较复杂。各位看官也可以自己看一下源码，点击后，会进入Activity的<code>startActivity(Intent intent)</code>这个方法，所以我们这里是看不到<code>AMS</code>是如何处理的。这里<code>AMS</code>会开辟内存空间，内存开辟后，这里会通知<code>AMS</code>，这时<code>AMS</code>会有一个孵化器，通过<code>fork</code>的方式，开启一个叫做<code>SystemService</code>，它会开启ActivityThread，这里面是由一个<code>main</code>方法的。我们接下来看一下这个main方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Trace<span class="token punctuation">.</span><span class="token function">traceBegin</span><span class="token punctuation">(</span>Trace<span class="token punctuation">.</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">,</span> <span class="token string">"ActivityThreadMain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// CloseGuard defaults to true and can be quite spammy.  We</span>        <span class="token comment" spellcheck="true">// disable it here, but selectively enable it later (via</span>        <span class="token comment" spellcheck="true">// StrictMode) on debug builds, but using DropBox, not logs.</span>        <span class="token comment" spellcheck="true">// closeguard默认为true，可能非常垃圾。这里禁用它，但以后</span>        <span class="token comment" spellcheck="true">//（通过strictmode）在调试版本上选择性地启用它，但使用Dropbox，而不是日志。</span>        CloseGuard<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Environment<span class="token punctuation">.</span><span class="token function">initForCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set the reporter for event logging in libcore</span>        <span class="token comment" spellcheck="true">// 在libcore中设置事件日志记录器</span>        EventLogger<span class="token punctuation">.</span><span class="token function">setReporter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EventLoggingReporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span>        <span class="token comment" spellcheck="true">// 确保TrustedCertificateStore查找CA证书的位置正确</span>        <span class="token keyword">final</span> File configDir <span class="token operator">=</span> Environment<span class="token punctuation">.</span><span class="token function">getUserConfigDirectory</span><span class="token punctuation">(</span>UserHandle<span class="token punctuation">.</span><span class="token function">myUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TrustedCertificateStore<span class="token punctuation">.</span><span class="token function">setDefaultUserDirectory</span><span class="token punctuation">(</span>configDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        Process<span class="token punctuation">.</span><span class="token function">setArgV0</span><span class="token punctuation">(</span><span class="token string">"&lt;pre-initialized>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Looper<span class="token punctuation">.</span><span class="token function">prepareMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Find the value for {@link #PROC_START_SEQ_IDENT} </span>        <span class="token comment" spellcheck="true">// if provided on the command line.</span>        <span class="token comment" spellcheck="true">// It will be in the format "seq=114"</span>        <span class="token comment" spellcheck="true">// 如果在命令行中提供了{@link #PROC_START_SEQ_IDENT}，请查找它的值。</span>        <span class="token comment" spellcheck="true">// 格式为“seq=114”</span>        <span class="token keyword">long</span> startSeq <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> args<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>PROC_START_SEQ_IDENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    startSeq <span class="token operator">=</span> Long<span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>                            args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>PROC_START_SEQ_IDENT<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ActivityThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActivityThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> startSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sMainThreadHandler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sMainThreadHandler <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Looper<span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMessageLogging</span><span class="token punctuation">(</span><span class="token keyword">new</span>                    <span class="token class-name">LogPrinter</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token string">"ActivityThread"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// End of event ActivityThreadMain.</span>        <span class="token comment" spellcheck="true">// 事件ActivityThreadMain的结束。</span>        Trace<span class="token punctuation">.</span><span class="token function">traceEnd</span><span class="token punctuation">(</span>Trace<span class="token punctuation">.</span>TRACE_TAG_ACTIVITY_MANAGER<span class="token punctuation">)</span><span class="token punctuation">;</span>        Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Main thread loop unexpectedly exited"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ------------------ Regular JNI ------------------------</span></code></pre><p>这里最主要的是<code>ActivityThread thread = new ActivityThread()</code>，这里的意思就是我们每点一个图标他就会开启一个进程(APP)，我们可以看一下<code>thread.attach(false, startSeq)</code>，这个方法中做了什么。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> system<span class="token punctuation">,</span> <span class="token keyword">long</span> startSeq<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sCurrentActivityThread <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        mSystemThread <span class="token operator">=</span> system<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>system<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ViewRootImpl<span class="token punctuation">.</span><span class="token function">addFirstDrawHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">ensureJitEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            android<span class="token punctuation">.</span>ddm<span class="token punctuation">.</span>DdmHandleAppName<span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"&lt;pre-initialized>"</span><span class="token punctuation">,</span>                                                    UserHandle<span class="token punctuation">.</span><span class="token function">myUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RuntimeInit<span class="token punctuation">.</span><span class="token function">setApplicationObject</span><span class="token punctuation">(</span>mAppThread<span class="token punctuation">.</span><span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> IActivityManager mgr <span class="token operator">=</span> ActivityManager<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mgr<span class="token punctuation">.</span><span class="token function">attachApplication</span><span class="token punctuation">(</span>mAppThread<span class="token punctuation">,</span> startSeq<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Watch for getting close to heap limit.</span>            <span class="token comment" spellcheck="true">// 注意是否接近堆限制。</span>            BinderInternal<span class="token punctuation">.</span><span class="token function">addGcWatcher</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mSomeActivitiesChanged<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    Runtime runtime <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">long</span> dalvikMax <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">long</span> dalvikUsed <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> runtime<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>dalvikUsed <span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>dalvikMax<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_MEMORY_TRIM<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">d</span>                        <span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Dalvik max="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dalvikMax<span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span>                                <span class="token operator">+</span> <span class="token string">" total="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span>                                <span class="token operator">+</span> <span class="token string">" used="</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dalvikUsed<span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        mSomeActivitiesChanged <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            mgr<span class="token punctuation">.</span><span class="token function">releaseSomeActivities</span><span class="token punctuation">(</span>mAppThread<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">rethrowFromSystemServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Don't set application object here -- if the system crashes,</span>            <span class="token comment" spellcheck="true">// we can't display an alert, we just want to die die die.</span>            <span class="token comment" spellcheck="true">// 不要在这里设置应用程序对象——如果系统崩溃，</span>            <span class="token comment" spellcheck="true">// 我们不能显示警报，我们只想死，死，死。</span>            android<span class="token punctuation">.</span>ddm<span class="token punctuation">.</span>DdmHandleAppName<span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"system_process"</span><span class="token punctuation">,</span>                    UserHandle<span class="token punctuation">.</span><span class="token function">myUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                mInstrumentation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instrumentation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mInstrumentation<span class="token punctuation">.</span><span class="token function">basicInit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ContextImpl context <span class="token operator">=</span> ContextImpl<span class="token punctuation">.</span><span class="token function">createAppContext</span><span class="token punctuation">(</span>                        <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getSystemContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mPackageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                mInitialApplication <span class="token operator">=</span> context<span class="token punctuation">.</span>mPackageInfo<span class="token punctuation">.</span><span class="token function">makeApplication</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                mInitialApplication<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>                        <span class="token string">"Unable to instantiate Application():"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// add dropbox logging to libcore</span>        <span class="token comment" spellcheck="true">// 将dropbox日志添加到libcore</span>        DropBox<span class="token punctuation">.</span><span class="token function">setReporter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DropBoxReporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ViewRootImpl<span class="token punctuation">.</span>ConfigChangedCallback configChangedCallback                <span class="token operator">=</span> <span class="token punctuation">(</span>Configuration globalConfig<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mResourcesManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// We need to apply this change to the resources immediately, </span>                <span class="token comment" spellcheck="true">// because upon returning the view hierarchy will be </span>                <span class="token comment" spellcheck="true">// informed about it.</span>                <span class="token comment" spellcheck="true">// 我们需要立即将此更改并应用于资源，在返回视图层次结构时，将通知它。</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mResourcesManager<span class="token punctuation">.</span><span class="token function">applyConfigurationToResourcesLocked</span><span class="token punctuation">(</span>globalConfig<span class="token punctuation">,</span>                        null <span class="token comment" spellcheck="true">/* compat */</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">updateLocaleListFromAppContext</span><span class="token punctuation">(</span>mInitialApplication<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            mResourcesManager<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLocales</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// This actually changed the resources! Tell everyone about it.</span>                     <span class="token comment" spellcheck="true">// 这实际上改变了资源!把这件事告诉大家。</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingConfiguration <span class="token operator">==</span> null                            <span class="token operator">||</span> mPendingConfiguration<span class="token punctuation">.</span><span class="token function">isOtherSeqNewer</span><span class="token punctuation">(</span>globalConfig<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        mPendingConfiguration <span class="token operator">=</span> globalConfig<span class="token punctuation">;</span>                        <span class="token function">sendMessage</span><span class="token punctuation">(</span>H<span class="token punctuation">.</span>CONFIGURATION_CHANGED<span class="token punctuation">,</span> globalConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        ViewRootImpl<span class="token punctuation">.</span><span class="token function">addConfigCallback</span><span class="token punctuation">(</span>configChangedCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这个方法主要是用于绑定Application，其中有一个<code>mgr.attachApplication(mAppThread, startSeq)</code>，就是这个方法用于绑定Application。<code>context.mPackageInfo.makeApplication(true, null)</code>这里我们可以看到开始使用Application，它会把包信息一点一点传入。当我们点击前面的变量时，<code>Application mInitialApplication</code>会跳转到这里，大家看到这里应该也就明白了，这就是我们经常继承的Application。<br>所以说，我们优化的过程就是从<code>Application</code>的<code>onCreate()</code>方法到<code>Activity</code>的<code>onCreate</code>方法。下图则是表示当系统的事情完成之后，我们优化的地方。如果说大家想从系统层就开始优化，将来有时间我们可以 共同学习一下这一块。<br><img src="https://i.loli.net/2019/07/18/5d30813a055e185135.png" alt="示意图"></p><h2 id="三、黑白屏"><a href="#三、黑白屏" class="headerlink" title="三、黑白屏"></a>三、黑白屏</h2><h3 id="1-问题根源"><a href="#1-问题根源" class="headerlink" title="1.问题根源"></a>1.问题根源</h3><p>   在我们新建项目的时候，都会有这么一个问题。就是在values-&gt;styles.xml这个文件。APP默认的这个主题。如果我们不加以设修改，就会出现黑白屏。</p><pre class=" language-css"><code class="language-css">&lt;resources>    &lt;!-- Base application theme<span class="token number">.</span> -->    &lt;style name=<span class="token string">"AppTheme"</span> parent=<span class="token string">"Theme.AppCompat.Light.DarkActionBar"</span>>        &lt;!-- Customize your theme here<span class="token number">.</span> -->        &lt;item name=<span class="token string">"colorPrimary"</span>>@color/colorPrimary&lt;/item>        &lt;item name=<span class="token string">"colorPrimaryDark"</span>>@color/colorPrimaryDark&lt;/item>        &lt;item name=<span class="token string">"colorAccent"</span>>@color/colorAccent&lt;/item>    &lt;/style>&lt;/resources></code></pre><p>  就下来我们从两个方面来说优化的这个事情。</p><h3 id="2-如何优化"><a href="#2-如何优化" class="headerlink" title="2.如何优化"></a>2.如何优化</h3><h4 id="1-伪优化"><a href="#1-伪优化" class="headerlink" title="1.伪优化"></a>1.伪优化</h4><p>  　　在用户的行为上做优化，实际上，这就是一种假的优化。通过各种方式，让用户结束。<br>  　　如果我们去除<code>parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;</code>这一块代码的话，这里就会出现启动后黑屏，如果写了则是白屏。如果手机性能特别好的话，可能看不出来。可以在<code>Application-&gt;onCreate()</code>到<code>Activity-&gt;onCreate()</code>之间加一个耗时操作。就可以看到。</p><h4 id="处理方案（1）"><a href="#处理方案（1）" class="headerlink" title="处理方案（1）"></a>处理方案（1）</h4><p>　　我们可以给它添加一张背景图，点击<code>parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;</code>进入系统定义的<code>valuse.xml</code>，找到一个父类<code>name=&quot;Platform.AppCompat.Light&quot;</code>中定义了<code>&lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/xx&lt;/item&gt;</code>用来控制黑白屏。有些小伙伴可能通过<code>&lt;item name=&quot;android:windowIsTranslucent&quot;&gt;true&lt;/item&gt;</code>把他设置为true，来修改这块。如果我们这么写的话，则会出现点击以后，会停留一段时间，然后再开启应用。这么写的话，还会占用内存。大家细心的话，也会发现QQ中也是这么写的，但是它的优化当然是更高级的咯。它是通过<code>&lt;item name=&quot;android:windowBackground&quot;&gt;@null&lt;/item&gt;</code><br>    <code>&lt;item name=&quot;android:windowDisablePreview&quot;&gt;true&lt;/item&gt;</code>来修改的。具体的意思就是去掉背景，然后去处预览功能。因为这类在加载的时候需要加载很多的信息，所以它就会通过这种方式来给自己的APP提供加载时间。如果，它检测到用户这里是有缓存的话，它就会直接拿缓存中的数据。反之，则会有启动页。</p><h4 id="处理方案（2）"><a href="#处理方案（2）" class="headerlink" title="处理方案（2）"></a>处理方案（2）</h4><p>　　我们直接这么写的话，肯定是不行的。为什么呢？因为所有的<code>Activity</code>都是用这个主题了，继而都会出现启动页面的情况，所以，我们需要单独给它写一个主题，然后在<code>AndroidManifest.xml</code>中配置。只需要找到使用<code>LAUNCHER</code>的这个<code>Activity</code>，然后给它添加主题就可以了。</p><h4 id="处理方案（3）"><a href="#处理方案（3）" class="headerlink" title="处理方案（3）"></a>处理方案（3）</h4><p>　　我们还可以通过做一些启动动画，或者说像<code>好好学习</code>这类APP的处理方式，就是在启动APP进入主页后，弹出一个<code>PopWindow</code>/<code>Dialog</code>，让用户同意<code>用户隐私政策概要</code>/<code>其他的一些东西，根据业务需求而定</code>。因为用户很少能做出反应，说弹出这个UI后，直接点击。这时，我们就可以在弹出这个页面后，加载主页面的UI。    　　　　</p><h4 id="2-非伪优化"><a href="#2-非伪优化" class="headerlink" title="2.非伪优化"></a>2.非伪优化</h4><h4 id="开启线程"><a href="#开启线程" class="headerlink" title="开启线程"></a>开启线程</h4><ol><li>如何查看从<code>Application-&gt;onCreate()</code>到<code>Activity-&gt;onCreate()</code>之间的优化？    <pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"app1.trace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> LogUtils<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把分析结果存放在路径</span> Debug<span class="token punctuation">.</span><span class="token function">startMethodTracing</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//其他的一些初始化的东西    </span> xxx<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> xx<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> xxxx<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结束的位置 停止</span> Debug<span class="token punctuation">.</span><span class="token function">stopMethodTracing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>　　我们添加完成后，就可以把<code>app1.trace</code>这个文件从SD卡的目录下打开，显示效果就是下图：<br><img src="https://b2.bmp.ovh/imgs/2019/07/d5e8dbe93ec7def0.png" alt="示意图"><br>　　我们从这里边可以看到很多信息，比如初始化了哪些控件，初始化时间，每个初始化所占用时间的比例等等。如果我们想做优化的话，就要看我们写的这些方法，哪儿块是可以优化的。在我们使用第三方库的时候，如果这时候我们想优化这些第三方库的加载时长，就需要看它是否能优化，为什么这么说呢？请看下图：<br><img src="https://b2.bmp.ovh/imgs/2019/07/b6aacf987c170e02.png" alt="示意图"><br>从图中我们可以看到一些信息，其中我们开启一个<code>线程A</code>(绿色箭头所指向的框) ，这里面是我们其中一段初始化的方法，它的耗时是比较长的(假定)，假设在蓝线这个时间点内，我们的<code>Activity-&gt;onCreate()</code>这个方法中，需要用到<code>线程A</code>中的方法，那么这时候就会出现<code>NullPointerException</code>。<br>所以说我们需要注意三个点：</li><li>里面的Api不能创建Handler</li><li>不能有UI操作</li><li>对异步要求不高<br><img src="https://b2.bmp.ovh/imgs/2019/07/23ba54356ef2d3b8.png" alt="示意图"><br>上图是我们优化后的效果，从中，还是可以看到加载时长从<code>3.146</code>缩减到<code>1.752</code>，说明我们优化的效果还是非常明显的。<h4 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h4>我们可以看一些主流的APP。<br>首先，它启动的时候，我们看到的是一个图片（也就是我们上面说的背景图），过渡完之后，会有一个3s的广告，之后就进入了主页。那我们就可以在3S的广告页中，做一些加载首页的UI界面的处理，就类似于电商首页的分页加载。我们就可以把这个分页加载运用在我们页面启动中。<br>实际实现起来比较麻烦，大家可以尝试一下，需要后台做一个保活，然后服务器要往这个地方发一个信息，之后这个进程再通知我们的URI去更新，更新的时候不是马上更新，而是先替换文件，下次打开的时候，我们看到的就是新的文件。</li></ol><hr><p>文章结尾时间：2019/7/31 14:46:05 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、App启动分类&quot;&gt;&lt;a href=&quot;#一、App启动分类&quot; class=&quot;headerlink&quot; title=&quot;一、App启动分类&quot;&gt;&lt;/a&gt;一、App启动分类&lt;/h2&gt;&lt;h3 id=&quot;1-冷启动-COLD-START&quot;&gt;&lt;a href=&quot;#1-冷启动-COL
      
    
    </summary>
    
      <category term="Android" scheme="https://lizhi0817.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://lizhi0817.github.io/tags/Android/"/>
    
      <category term="性能优化" scheme="https://lizhi0817.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lizhi0817.github.io/2019/07/17/hello-world/"/>
    <id>https://lizhi0817.github.io/2019/07/17/hello-world/</id>
    <published>2019-07-17T12:18:36.671Z</published>
    <updated>2019-07-18T07:40:23.211Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
